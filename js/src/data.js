// Generated by CoffeeScript 1.3.1
(function() {
  var Config, Database, Looks, Stars, check, config, current_count, data, date, debugmode, log, looks, margin, next, observer, reset_looks, stars, stars_version, table_count, time,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  data = STARS_DATA;

  stars_version = 1;

  margin = 30;

  date = new Date();

  time = new Orb.Time(date);

  observer = {
    "latitude": 35.658,
    "longitude": 139.741,
    "altitude": 0
  };

  html5sql.openDatabase('space_geosocial', 'Space Geosocial', 10 * 1024 * 1024);

  debugmode = true;

  log = function() {
    if (debugmode === true && ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null)) {
      return console.log(arguments);
    }
  };

  Database = (function() {

    Database.name = 'Database';

    function Database(cb) {
      this.truncate = __bind(this.truncate, this);

      this.delete_all = __bind(this.delete_all, this);

      this.get_len = __bind(this.get_len, this);

      this.get_all = __bind(this.get_all, this);

      this.create_table = __bind(this.create_table, this);

      this.drop_table = __bind(this.drop_table, this);

      this.execute = __bind(this.execute, this);

    }

    Database.prototype.execute = function(cb, query) {
      var error,
        _this = this;
      error = {};
      return html5sql.process(query, function(transaction, results) {
        log('EXECUTE SUCCESS >> ', transaction, results);
        if ((cb != null) && typeof cb === 'function') {
          return cb(null, transaction, results);
        }
      }, function(error) {
        log('EXECUTE ERRORS >> ', arguments);
        if ((cb != null) && typeof cb === 'function') {
          return cb(error);
        }
      });
    };

    Database.prototype.drop_table = function(cb) {
      var query;
      if (!this.table_name) {
        return false;
      }
      query = 'DROP TABLE IF EXISTS ' + this.table_name + ';';
      return this.execute(cb, query);
    };

    Database.prototype.create_table = function(cb) {
      var field_name, field_schema, fields, query, _ref;
      if (!(this.schema != null) || !this.table_name) {
        return false;
      }
      if (!this.schema_sql || this.schema_sql === '') {
        query = 'CREATE TABLE IF NOT EXISTS ' + this.table_name + ' (' + "\n";
        fields = '';
        _ref = this.schema;
        for (field_name in _ref) {
          field_schema = _ref[field_name];
          if (fields !== '') {
            fields += ",\n";
          }
          fields += field_name + ' ' + field_schema;
        }
        query += fields + "\n);";
        this.schema_sql = query;
      } else {
        query = this.schema_sql;
      }
      return this.execute(cb, query);
    };

    Database.prototype.get_all = function(cb) {
      var key, keys, query, value, _ref;
      keys = '';
      _ref = this.schema;
      for (key in _ref) {
        value = _ref[key];
        if (keys !== '') {
          keys += ',';
        }
        keys += key;
      }
      query = 'SELECT ' + keys + ' FROM ' + this.table_name + ';';
      return this.execute(cb, query);
    };

    Database.prototype.get_len = function(cb) {
      var query;
      query = 'SELECT COUNT(*) FROM ' + this.table_name + ';';
      return this.execute(cb, query);
    };

    Database.prototype.delete_all = function(cb) {
      var query;
      query = 'DELETE FROM ' + this.table_name + ';';
      return this.execute(cb, query);
    };

    Database.prototype.truncate = function(cb) {
      var _this = this;
      return this.drop_table(function() {
        return _this.create_table(function() {
          if ((cb != null) && typeof cb === 'function') {
            return cb();
          }
        });
      });
    };

    return Database;

  })();

  Config = (function(_super) {

    __extends(Config, _super);

    Config.name = 'Config';

    function Config() {
      this.set = __bind(this.set, this);

      this.get = __bind(this.get, this);
      return Config.__super__.constructor.apply(this, arguments);
    }

    Config.prototype.table_name = 'config';

    Config.prototype.schema = {
      id: 'INTEGER PRIMARY KEY AUTOINCREMENT',
      name: 'TEXT',
      value: 'TEXT'
    };

    Config.prototype.get = function(cb, name) {
      var query,
        _this = this;
      query = [
        {
          sql: 'SELECT value FROM ' + this.table_name + ' WHERE name = ? LIMIT 1;',
          data: [name]
        }
      ];
      return this.execute(function(error, tx, results) {
        var value, _ref;
        value = null;
        if (((results != null ? (_ref = results.rows) != null ? _ref.length : void 0 : void 0) != null) && results.rows.length > 0) {
          value = results.rows.item(0).value;
        }
        return cb(value);
      }, query);
    };

    Config.prototype.set = function(cb, name, value) {
      var _this = this;
      return this.get(function(err, tx, results) {
        var query, _ref;
        if (((results != null ? (_ref = results.rows) != null ? _ref.length : void 0 : void 0) != null) && results.rows.length > 0) {
          query = [
            {
              sql: 'UPDATE ' + _this.table_name + ' SET value = ? WHERE id = ?',
              data: [value, results.rows.item(0).id]
            }
          ];
        } else {
          query = [
            {
              sql: 'INSERT INTO ' + _this.table_name + ' (name, value) VALUES (?, ?);',
              data: [name, value]
            }
          ];
        }
        return _this.execute(cb, query);
      }, name);
    };

    return Config;

  })(Database);

  Looks = (function(_super) {

    __extends(Looks, _super);

    Looks.name = 'Looks';

    function Looks() {
      this.get_near_stars = __bind(this.get_near_stars, this);

      this.reset_looks = __bind(this.reset_looks, this);
      return Looks.__super__.constructor.apply(this, arguments);
    }

    Looks.prototype.table_name = 'looks';

    Looks.prototype.schema = {
      id: 'INTEGER PRIMARY KEY AUTOINCREMENT',
      star_id: 'INTEGER',
      azimuth: 'REAL',
      elevation: 'REAL',
      hour_angle: 'REAL'
    };

    Looks.prototype.reset_looks = function(cb) {
      var stars,
        _this = this;
      stars = new Stars();
      return stars.get_all(function(error, tx, results) {
        var cnt, _ref;
        if (error === null && ((results != null ? (_ref = results.rows) != null ? _ref.length : void 0 : void 0) != null) && results.rows.length > 0) {
          stars = [];
          cnt = 0;
          while (cnt < results.rows.length) {
            stars.push(results.rows.item(cnt));
            cnt++;
          }
          return _this.delete_all(function() {
            var look, observe, queries, star, target, _i, _len;
            queries = [];
            for (_i = 0, _len = stars.length; _i < _len; _i++) {
              star = stars[_i];
              target = {
                ra: star.rah,
                dec: star.ded
              };
              observe = new Orb.Observation(observer, target);
              look = observe.horizontal(time);
              queries.push({
                sql: 'INSERT INTO ' + _this.table_name + ' (star_id, azimuth, elevation, hour_angle) VALUES (?, ?, ?, ?);',
                data: [star.id, look.azimuth, look.elevation, look.hour_angle]
              });
            }
            return _this.execute(cb, queries);
          });
        }
      });
    };

    Looks.prototype.get_near_stars = function(cb, alpha, gamma) {
      var alpha_max, alpha_min, gamma_max, gamma_min;
      alpha_min = alpha - margin;
      alpha_max = alpha + margin;
      gamma_min = gamma - margin;
      gamma_max = gamma + margin;
      log(alpha_min, alpha_max, gamma_min, gamma_max);
      return cb();
    };

    return Looks;

  })(Database);

  Stars = (function(_super) {

    __extends(Stars, _super);

    Stars.name = 'Stars';

    function Stars() {
      this.reset_stars = __bind(this.reset_stars, this);
      return Stars.__super__.constructor.apply(this, arguments);
    }

    Stars.prototype.table_name = 'stars';

    Stars.prototype.schema = {
      id: 'INTEGER PRIMARY KEY AUTOINCREMENT',
      hr: 'TEXT',
      bfid: 'TEXT',
      name: 'TEXT',
      rah: 'REAL',
      ded: 'REAL',
      vmag: 'REAL',
      sp: 'TEXT',
      pmra: 'REAL',
      pmde: 'REAL'
    };

    Stars.prototype.reset_stars = function(cb) {
      var _this = this;
      return this.delete_all(function() {
        var bfID, cnt, ded, hr, insert_query, look, name, observe, pmde, pmra, queries, rah, sp, star, target, vmag, _i, _len;
        insert_query = 'INSERT INTO stars (hr, bfid, name, rah, ded, vmag, sp, pmra, pmde) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);';
        queries = [];
        cnt = 0;
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          star = data[_i];
          if (!((star != null ? star.RAh : void 0) != null) || !(star.DEd != null)) {
            continue;
          }
          target = {
            ra: star.RAh,
            dec: star.DEd
          };
          observe = new Orb.Observation(observer, target);
          look = observe.horizontal(time);
          hr = star.HR != null ? star.HR : '';
          bfID = star.bfID != null ? star.bfID : '';
          name = star.Name != null ? star.Name : '';
          rah = star.RAh != null ? star.RAh : 0;
          ded = star.DEd != null ? star.DEd : 0;
          vmag = star.Vmag != null ? star.Vmag : 0;
          sp = star.Sp != null ? star.Sp : '';
          pmra = star.pmRA != null ? star.pmRA : 0;
          pmde = star.pmDE != null ? star.pmDE : 0;
          queries.push({
            sql: insert_query,
            data: [hr, bfID, name, rah, ded, vmag, sp, pmra, pmde]
          });
        }
        return _this.execute(cb, queries);
      });
    };

    return Stars;

  })(Database);

  next = function() {
    var _this = this;
    return config.get(function(value) {
      if (!(value != null) || parseInt(value) < parseInt(stars_version)) {
        return stars.reset_stars(function() {
          return config.set(function() {
            return reset_looks();
          }, 'stars_version', stars_version);
        });
      } else {
        return reset_looks();
      }
    }, 'stars_version');
  };

  table_count = 3;

  current_count = 0;

  check = function() {
    current_count++;
    if (current_count >= table_count) {
      return next();
    }
  };

  config = new Config();

  config.create_table(check());

  stars = new Stars();

  stars.create_table(check());

  looks = new Looks();

  looks.create_table(check());

  reset_looks = function() {
    var _this = this;
    return looks.reset_looks(function() {
      return looks.get_near_stars(function() {
        return log('hoge');
      }, 10, 10);
    });
  };

}).call(this);
